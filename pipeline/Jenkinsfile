pipeline {
    agent any

    environment {
        SONAR_TOKEN = credentials('sonar_jenkins') // Jeton SonarQube
        SONARQUBE_URL = 'http://195.15.200.226:9000' // URL de SonarQube
    }

    stages {
        // Étape de clonage du dépôt Git
        stage("Clone") {
            steps {
                sh "git clone https://github.com/iamKrishnendu/selenium-docker.git"
            }
        }

        // Étape de construction du projet Maven
        stage("Build") {
            steps {
                sh 'mvn --version' // Vérifie la version de Maven installée
                sh 'mvn clean install -Dbrowser=chrome' // Compile et construit le projet en spécifiant le navigateur "chrome"
            }
        }

        // Étape d'analyse SonarQube
        stage("SonarQube Analysis") {
            steps {
                withSonarQubeEnv('sonarqube') { // Utilisation de la configuration SonarQube définie dans Jenkins
                    sh 'mvn sonar:sonar ' +
                       '-Dsonar.projectKey=selenium-docker ' + // Clé unique du projet dans SonarQube
                       '-Dsonar.host.url=$SONARQUBE_URL ' + // URL de l'instance SonarQube
                       '-Dsonar.login=$SONAR_TOKEN' // Jeton d'authentification pour SonarQube
                }
            }
        }

        // Étape de vérification du Quality Gate
        stage("Quality Gate") {
            steps {
                script {
                    timeout(time: 1, unit: 'MINUTES') { // Timeout de 1 minute pour éviter l'attente indéfinie
                        def qualityGate = waitForQualityGate() // Attente des résultats du Quality Gate de SonarQube
                        if (qualityGate.status != 'OK') {
                            error "Quality Gate failed: ${qualityGate.status}" // Échec si le Quality Gate n'est pas respecté
                        }
                    }
                }
            }
        }

        // Étape de déploiement vers le serveur Tomcat
        stage("Deploy to Tomcat") {
            steps {
                // Utilisation des informations d'identification SSH pour accéder au serveur Tomcat
                sshagent(credentials: ['production']) { // ID de credentials SSH pour l'accès au serveur
                    sh '''
                        scp -o StrictHostKeyChecking=no target/*.war debian@195.15.207.39:/opt/tomcat/webapps/
                    '''
                }
            }
        }
    }

    // Actions post-pipeline
    post {
        always {
            echo "Build ${currentBuild.fullDisplayName} has ${currentBuild.currentResult}." // Résultat du build
            cleanWs() // Nettoyage de l'espace de travail
        }
    }
}




// pipeline {
//     agent any
//     stages {
//         stage("clone"){
//             steps{
//                 sh "git clone https://github.com/iamKrishnendu/selenium-docker.git"
//             }
//         }
//         stage('build') {
//             steps {
//                 sh 'mvn --version'
//                 sh 'mvn clean install -Dbrowser=chrome'
//             }
//         }
//     }

// post{
//      always{
//         echo "Build ${currentBuild.fullDisplayName} has ${currentBuild.currentResult}."
//         cleanWs()
//         }
//     }
// }
